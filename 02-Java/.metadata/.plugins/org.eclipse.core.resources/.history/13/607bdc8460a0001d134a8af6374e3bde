package com.ssafy.day09;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


public class WeatherService {
	public WeatherService() throws Exception {
//		getWeatherInfo("https://www.kma.go.kr/wid/queryDFSRSS.jsp?zone=3020052600");
		List<Weather> list = domProcessing();
		
        for (Weather info : list) {
            System.out.println(info);
        }

//		saxProcessing();
	}

	private List<Weather> domProcessing() throws Exception {
		final File xml = new File("./weather.xml");
		List<Weather> list = new ArrayList<>();
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document doc = builder.parse(xml);

		Element root = doc.getDocumentElement();
		domParse(root, list);

		return list;
	}

	private void domParse(Element root, List<Weather> list) {
		NodeList weathers = root.getElementsByTagName("data");
		for (int i = 0; i < weathers.getLength(); i++) {
			Node child = weathers.item(i);
			list.add(getWeather(child));
		}
	}

	private static Weather getWeather(Node node) {
		Weather weather = new Weather();
		// TODO: node 정보를 이용해서 BoxOffice를 구성하고 반환하시오.
		NodeList childs = node.getChildNodes();
		for (int i = 0; i < childs.getLength(); i++) {
			Node child = childs.item(i);
			if (child.getNodeName().equals("hour")) {
				weather.setHour(Integer.parseInt(child.getTextContent()));
			} else if (child.getNodeName().equals("temp")) {
				weather.setTemp(Double.parseDouble(child.getTextContent()));
			} else if (child.getNodeName().equals("wfKor")) {
				weather.setWfKor(child.getTextContent());
			} else if (child.getNodeName().equals("wdKor")) {
				weather.setWdKor(child.getTextContent());
			}
		}

		// END:
		return weather;
	}

	private void saxProcessing() {
		
	}

	private void getWeatherInfo(String Url) throws Exception {
		URL url = new URL(Url);
		/*
		 * 요청 방식중에 POST 방식을 이용하거나 요청시 페더 정보를 추가하는 경욷에 사용된다. URLConnection urlConn =
		 * url.openConnection(); InputStream in1 = urlConn.getInputStream();
		 */
		BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));

		StringBuffer xml = new StringBuffer();
		while (true) {
			String line = br.readLine();
			if (line == null)
				break;
			xml.append(line);
		}
		System.out.println(xml);

		createXMLFile(xml);
	}

	private void createXMLFile(StringBuffer xml) throws IOException {
		FileWriter fw = new FileWriter("weather.xml");
		fw.write(xml.toString());
		fw.close();
		System.out.println("날씨정보 저장됨");
	}
}
