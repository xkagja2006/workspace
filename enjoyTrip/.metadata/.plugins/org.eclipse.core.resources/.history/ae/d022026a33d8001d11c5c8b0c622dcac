package com.ssafy.enjoytrip.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import com.ssafy.enjoytrip.dto.Attraction;
import com.ssafy.enjoytrip.dto.Favorite;
import com.ssafy.enjoytrip.dto.Sido;
import com.ssafy.enjoytrip.util.DBUtil;

public class AttractionDaoImpl implements AttractionDao {
	private static AttractionDao instance = new AttractionDaoImpl(); 
	private SqlSessionFactory sqlSessionFactory;
	private static String NS = "resource.mapper.attraction";

	private AttractionDaoImpl() {
		sqlSessionFactory = DBUtil.getSqlSessionFactory();
	}

	public static AttractionDao getInstance() {
		return instance;
	}

	@Override
	public List<Attraction> selectAttraction() throws SQLException {
		SqlSession sqlSession = sqlSessionFactory.openSession();
		List<Attraction> list = sqlSession.selectList(NS + ".selectAttractionList");
		return list;
	}

	@Override
	public List<Sido> selectSido() throws SQLException {
		SqlSession sqlSession = sqlSessionFactory.openSession();
		List<Sido> list = sqlSession.selectList(NS + ".selectSidoList");
		return list;
	}
	@Override
	public  List<Attraction> selectAttractionBySido(String sido) throws SQLException {
		SqlSession sqlSession = sqlSessionFactory.openSession();
		List<Attraction> list = sqlSession.selectList(NS + ".selectAttractionBySidoList", sido);
		return list;
	}

	public List<Attraction> selectAttractionBySido22(String sido) throws SQLException {
		try (Connection con = db.getConnection();
				PreparedStatement pstmt = con.prepareStatement(
						"SELECT i.content_id, des.homepage, des.overview, des.telname, d.cat1, d.cat2, d.cat3, d.created_time, d.modified_time, d.booktour, i.content_type_id, i.title, i.addr1, i.addr2, i.zipcode, i.tel, i.first_image, i.first_image2, i.readcount, i.sido_code, i.gugun_code, i.latitude, i.longitude, i.mlevel "
								+ "FROM attraction_info i, attraction_detail d, attraction_description des "
								+ "WHERE i.content_id = d.content_id " + "and i.content_id = des.content_id "
								+ "AND i.sido_code=?" + "LIMIT 20" + ";");) {
			pstmt.setString(1, sido);
			ResultSet rs = pstmt.executeQuery();
			List<Attraction> list = new ArrayList<Attraction>();
			while (rs.next()) {
				Attraction a = new Attraction();
				a.setAddr1(rs.getString("addr1"));
				a.setAddr2(rs.getString("addr2"));
				a.setBooktour(rs.getString("booktour"));
				a.setCat1(rs.getString("cat1"));
				a.setCat2(rs.getString("cat2"));
				a.setCat3(rs.getString("cat3"));
				a.setContentId(rs.getString("content_id"));
				a.setContentTypeId(rs.getString("content_type_id"));
				a.setCreatedTime(rs.getString("created_time"));
				a.setFirstImage(rs.getString("first_image"));
				a.setFirstImage2(rs.getString("first_image2"));
				a.setGugunCode(rs.getString("gugun_code"));
				a.setHomepage(rs.getString("homepage"));
				a.setLatitude(rs.getString("latitude"));
				a.setLongitude(rs.getString("longitude"));
				a.setMlevel(rs.getString("mlevel"));
				a.setModifiedTime(rs.getString("modified_time"));
				a.setReadcount(rs.getString("readcount"));
				a.setShortDesc(rs.getString("overview"));
				a.setSidoCode(rs.getString("sido_code"));
				a.setTel(rs.getString("tel"));
				a.setTelname(rs.getString("telname"));
				a.setTitle(rs.getString("title"));
				a.setZipcode(rs.getString("zipcode"));
				list.add(a);
			}
			return list;
		}
	}

	@Override
	public List<Favorite> selectFavoriteById(String id) throws SQLException {
		try (Connection con = db.getConnection();
				PreparedStatement pstmt = con.prepareStatement(
						"SELECT f.favorite_id, f.user_id, i.content_id, i.content_type_id , i.title, s.sido_name, i.first_image ,g.gugun_name\r\n"
								+ "FROM attraction_info i, favorite f, gugun g, sido s\r\n" 
								+ "WHERE f.user_id = ? \r\n"
								+ "AND i.content_id = f.attraction_id\r\n" + "AND i.sido_code = s.sido_code\r\n"
								+ "AND i.gugun_code = g.gugun_code\r\n" + "AND g.sido_code = s.sido_code\r\n"
								+ "ORDER BY f.favorite_id desc\r\n" + ";");) {
			pstmt.setString(1, id);
			ResultSet rs = pstmt.executeQuery();
			List<Favorite> list = new ArrayList<>();
			while (rs.next()) {
				Favorite f = new Favorite();
				// favorite_id, user_id, content_id, content_type_id, title, sido_name,
				// gugun_name
				f.setContentId(rs.getString("content_id"));
				f.setContentTypeId(rs.getString("content_type_id"));
				f.setFavoriteId(rs.getString("favorite_id"));
				f.setGugunName(rs.getString("gugun_name"));
				f.setSidoName(rs.getString("sido_name"));
				f.setTitle(rs.getString("title"));
				f.setUserId(rs.getString("user_id"));
				f.setImg(rs.getString("first_image"));
				list.add(f);
			}
			return list;
		}
	}

}
